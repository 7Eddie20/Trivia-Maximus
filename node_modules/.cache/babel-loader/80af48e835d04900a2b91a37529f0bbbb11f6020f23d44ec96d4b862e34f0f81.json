{"ast":null,"code":"var _jsxFileName = \"R:\\\\Projects\\\\Quiz-App\\\\src\\\\pages\\\\QuizArea\\\\QuizArea.jsx\",\n  _s = $RefreshSig$();\nimport { useContext } from 'react';\nimport QuestionBox from '../../components/QuestionBox/QuestionBox';\nimport quizContext from '../../context/quizContext';\nimport Scoreboard from '../ScoreBoard/Scoreboard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst QuizArea = () => {\n  _s();\n  const context = useContext(quizContext);\n  const {\n    questions,\n    next,\n    len,\n    score\n  } = context;\n  const randomNumber = () => {\n    return Math.floor(Math.random() * 4);\n  };\n  const getOptions = (incorrectAns, correctAns) => {\n    let optionsArray = incorrectAns;\n    if (!optionsArray.includes(correctAns)) {\n      optionsArray.splice(randomNumber(), 0, correctAns);\n      return [optionsArray, correctAns];\n    } else {\n      return [optionsArray, correctAns];\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children:\n    //For fetch All the Questions ðŸ”´\n\n    // questions.map((index) => {\n    //     const options = getOptions(index.incorrect_answers, index.correct_answer)\n    //     return <QuestionBox category={index.category} options={options} question={index.question} key={index.question} />\n    // })\n\n    next <= len - 1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container p-4\",\n      children: /*#__PURE__*/_jsxDEV(QuestionBox, {\n        category: questions[next].category,\n        options: getOptions(questions[next].incorrect_answers, questions[next].correct_answer),\n        question: questions[next].question\n      }, questions[next].question, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(Scoreboard, {\n      total_que: len,\n      wrong_que: score.wrongAnswers,\n      correct_que: score.rightAnswers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 21\n    }, this)\n  }, void 0, false);\n};\n_s(QuizArea, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n_c = QuizArea;\nexport default QuizArea;\nvar _c;\n$RefreshReg$(_c, \"QuizArea\");","map":{"version":3,"names":["useContext","QuestionBox","quizContext","Scoreboard","QuizArea","context","questions","next","len","score","randomNumber","Math","floor","random","getOptions","incorrectAns","correctAns","optionsArray","includes","splice","category","incorrect_answers","correct_answer","question","wrongAnswers","rightAnswers"],"sources":["R:/Projects/Quiz-App/src/pages/QuizArea/QuizArea.jsx"],"sourcesContent":["import { useContext } from 'react';\nimport QuestionBox from '../../components/QuestionBox/QuestionBox'\nimport quizContext from '../../context/quizContext';\nimport Scoreboard from '../ScoreBoard/Scoreboard';\n\nconst QuizArea = () => {\n    const context = useContext(quizContext)\n    const { questions, next, len, score } = context\n\n    const randomNumber = () => {\n        return Math.floor(Math.random() * 4);\n    }\n\n    const getOptions = (incorrectAns, correctAns) => {\n        let optionsArray = incorrectAns;\n        if (!optionsArray.includes(correctAns)) {\n            optionsArray.splice(randomNumber(), 0, correctAns);\n            return [optionsArray, correctAns];\n        } else {\n            return [optionsArray, correctAns];\n        }\n    }\n\n\n    return (\n        <>\n            {\n                //For fetch All the Questions ðŸ”´\n\n                // questions.map((index) => {\n                //     const options = getOptions(index.incorrect_answers, index.correct_answer)\n                //     return <QuestionBox category={index.category} options={options} question={index.question} key={index.question} />\n                // })\n\n                (next <= len - 1)\n                    ?\n                    <div className=\"container p-4\">\n                        < QuestionBox category={questions[next].category} options={getOptions(questions[next].incorrect_answers, questions[next].correct_answer)} question={questions[next].question} key={questions[next].question} />\n                    </div>\n                    :\n                    <Scoreboard total_que={len} wrong_que={score.wrongAnswers} correct_que={score.rightAnswers} />\n            }\n        </>\n    )\n}\n\nexport default QuizArea\n"],"mappings":";;AAAA,SAASA,UAAU,QAAQ,OAAO;AAClC,OAAOC,WAAW,MAAM,0CAA0C;AAClE,OAAOC,WAAW,MAAM,2BAA2B;AACnD,OAAOC,UAAU,MAAM,0BAA0B;AAAC;AAAA;AAElD,MAAMC,QAAQ,GAAG,MAAM;EAAA;EACnB,MAAMC,OAAO,GAAGL,UAAU,CAACE,WAAW,CAAC;EACvC,MAAM;IAAEI,SAAS;IAAEC,IAAI;IAAEC,GAAG;IAAEC;EAAM,CAAC,GAAGJ,OAAO;EAE/C,MAAMK,YAAY,GAAG,MAAM;IACvB,OAAOC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,CAAC,CAAC;EACxC,CAAC;EAED,MAAMC,UAAU,GAAG,CAACC,YAAY,EAAEC,UAAU,KAAK;IAC7C,IAAIC,YAAY,GAAGF,YAAY;IAC/B,IAAI,CAACE,YAAY,CAACC,QAAQ,CAACF,UAAU,CAAC,EAAE;MACpCC,YAAY,CAACE,MAAM,CAACT,YAAY,EAAE,EAAE,CAAC,EAAEM,UAAU,CAAC;MAClD,OAAO,CAACC,YAAY,EAAED,UAAU,CAAC;IACrC,CAAC,MAAM;MACH,OAAO,CAACC,YAAY,EAAED,UAAU,CAAC;IACrC;EACJ,CAAC;EAGD,oBACI;IAAA;IAEQ;;IAEA;IACA;IACA;IACA;;IAECT,IAAI,IAAIC,GAAG,GAAG,CAAC,gBAEZ;MAAK,SAAS,EAAC,eAAe;MAAA,uBAC1B,QAAE,WAAW;QAAC,QAAQ,EAAEF,SAAS,CAACC,IAAI,CAAC,CAACa,QAAS;QAAC,OAAO,EAAEN,UAAU,CAACR,SAAS,CAACC,IAAI,CAAC,CAACc,iBAAiB,EAAEf,SAAS,CAACC,IAAI,CAAC,CAACe,cAAc,CAAE;QAAC,QAAQ,EAAEhB,SAAS,CAACC,IAAI,CAAC,CAACgB;MAAS,GAAMjB,SAAS,CAACC,IAAI,CAAC,CAACgB,QAAQ;QAAA;QAAA;QAAA;MAAA;IAAI;MAAA;MAAA;MAAA;IAAA,QAC7M,gBAEN,QAAC,UAAU;MAAC,SAAS,EAAEf,GAAI;MAAC,SAAS,EAAEC,KAAK,CAACe,YAAa;MAAC,WAAW,EAAEf,KAAK,CAACgB;IAAa;MAAA;MAAA;MAAA;IAAA;EAAG,iBAEvG;AAEX,CAAC;AAAA,GAvCKrB,QAAQ;AAAA,KAARA,QAAQ;AAyCd,eAAeA,QAAQ;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}