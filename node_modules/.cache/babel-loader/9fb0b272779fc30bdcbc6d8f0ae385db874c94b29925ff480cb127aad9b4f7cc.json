{"ast":null,"code":"function decay(_ref) {\n  var _ref$velocity = _ref.velocity,\n    velocity = _ref$velocity === void 0 ? 0 : _ref$velocity,\n    _ref$from = _ref.from,\n    from = _ref$from === void 0 ? 0 : _ref$from,\n    _ref$power = _ref.power,\n    power = _ref$power === void 0 ? 0.8 : _ref$power,\n    _ref$timeConstant = _ref.timeConstant,\n    timeConstant = _ref$timeConstant === void 0 ? 350 : _ref$timeConstant,\n    _ref$restDelta = _ref.restDelta,\n    restDelta = _ref$restDelta === void 0 ? 0.5 : _ref$restDelta,\n    modifyTarget = _ref.modifyTarget;\n  /**\r\n   * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\r\n   * to reduce GC during animation.\r\n   */\n  var state = {\n    done: false,\n    value: from\n  };\n  var amplitude = power * velocity;\n  var ideal = from + amplitude;\n  var target = modifyTarget === undefined ? ideal : modifyTarget(ideal);\n  /**\r\n   * If the target has changed we need to re-calculate the amplitude, otherwise\r\n   * the animation will start from the wrong position.\r\n   */\n  if (target !== ideal) amplitude = target - from;\n  return {\n    next: function next(t) {\n      var delta = -amplitude * Math.exp(-t / timeConstant);\n      state.done = !(delta > restDelta || delta < -restDelta);\n      state.value = state.done ? target : target + delta;\n      return state;\n    },\n    flipTarget: function flipTarget() {}\n  };\n}\nexport { decay };","map":{"version":3,"names":["decay","velocity","from","power","timeConstant","restDelta","modifyTarget","state","done","value","amplitude","ideal","target","undefined","next","t","delta","Math","exp","flipTarget"],"sources":["R:/Projects/Trivia-Maximus/node_modules/framer-motion/dist/es/animation/legacy-popmotion/decay.mjs"],"sourcesContent":["function decay({ velocity = 0, from = 0, power = 0.8, timeConstant = 350, restDelta = 0.5, modifyTarget, }) {\r\n    /**\r\n     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\r\n     * to reduce GC during animation.\r\n     */\r\n    const state = { done: false, value: from };\r\n    let amplitude = power * velocity;\r\n    const ideal = from + amplitude;\r\n    const target = modifyTarget === undefined ? ideal : modifyTarget(ideal);\r\n    /**\r\n     * If the target has changed we need to re-calculate the amplitude, otherwise\r\n     * the animation will start from the wrong position.\r\n     */\r\n    if (target !== ideal)\r\n        amplitude = target - from;\r\n    return {\r\n        next: (t) => {\r\n            const delta = -amplitude * Math.exp(-t / timeConstant);\r\n            state.done = !(delta > restDelta || delta < -restDelta);\r\n            state.value = state.done ? target : target + delta;\r\n            return state;\r\n        },\r\n        flipTarget: () => { },\r\n    };\r\n}\r\n\r\nexport { decay };\r\n"],"mappings":"AAAA,SAASA,KAAK,OAA8F;EAAA,yBAA3FC,QAAQ;IAARA,QAAQ,8BAAG,CAAC;IAAA,iBAAEC,IAAI;IAAJA,IAAI,0BAAG,CAAC;IAAA,kBAAEC,KAAK;IAALA,KAAK,2BAAG,GAAG;IAAA,yBAAEC,YAAY;IAAZA,YAAY,kCAAG,GAAG;IAAA,sBAAEC,SAAS;IAATA,SAAS,+BAAG,GAAG;IAAEC,YAAY,QAAZA,YAAY;EACnG;AACJ;AACA;AACA;EACI,IAAMC,KAAK,GAAG;IAAEC,IAAI,EAAE,KAAK;IAAEC,KAAK,EAAEP;EAAK,CAAC;EAC1C,IAAIQ,SAAS,GAAGP,KAAK,GAAGF,QAAQ;EAChC,IAAMU,KAAK,GAAGT,IAAI,GAAGQ,SAAS;EAC9B,IAAME,MAAM,GAAGN,YAAY,KAAKO,SAAS,GAAGF,KAAK,GAAGL,YAAY,CAACK,KAAK,CAAC;EACvE;AACJ;AACA;AACA;EACI,IAAIC,MAAM,KAAKD,KAAK,EAChBD,SAAS,GAAGE,MAAM,GAAGV,IAAI;EAC7B,OAAO;IACHY,IAAI,EAAE,cAACC,CAAC,EAAK;MACT,IAAMC,KAAK,GAAG,CAACN,SAAS,GAAGO,IAAI,CAACC,GAAG,CAAC,CAACH,CAAC,GAAGX,YAAY,CAAC;MACtDG,KAAK,CAACC,IAAI,GAAG,EAAEQ,KAAK,GAAGX,SAAS,IAAIW,KAAK,GAAG,CAACX,SAAS,CAAC;MACvDE,KAAK,CAACE,KAAK,GAAGF,KAAK,CAACC,IAAI,GAAGI,MAAM,GAAGA,MAAM,GAAGI,KAAK;MAClD,OAAOT,KAAK;IAChB,CAAC;IACDY,UAAU,EAAE,sBAAM,CAAE;EACxB,CAAC;AACL;AAEA,SAASnB,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}