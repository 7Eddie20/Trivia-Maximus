{"ast":null,"code":"import _slicedToArray from \"R:/Projects/Trivia-Maximus/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useContext, useState, useEffect } from 'react';\nimport { motionValue } from './index.mjs';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { useConstant } from '../utils/use-constant.mjs';\n\n/**\r\n * Creates a `MotionValue` to track the state and velocity of a value.\r\n *\r\n * Usually, these are created automatically. For advanced use-cases, like use with `useTransform`, you can create `MotionValue`s externally and pass them into the animated component via the `style` prop.\r\n *\r\n * ```jsx\r\n * export const MyComponent = () => {\r\n *   const scale = useMotionValue(1)\r\n *\r\n *   return <motion.div style={{ scale }} />\r\n * }\r\n * ```\r\n *\r\n * @param initial - The initial state.\r\n *\r\n * @public\r\n */\nfunction useMotionValue(initial) {\n  var value = useConstant(function () {\n    return motionValue(initial);\n  });\n  /**\r\n   * If this motion value is being used in static mode, like on\r\n   * the Framer canvas, force components to rerender when the motion\r\n   * value is updated.\r\n   */\n  var _useContext = useContext(MotionConfigContext),\n    isStatic = _useContext.isStatic;\n  if (isStatic) {\n    var _useState = useState(initial),\n      _useState2 = _slicedToArray(_useState, 2),\n      setLatest = _useState2[1];\n    useEffect(function () {\n      return value.onChange(setLatest);\n    }, []);\n  }\n  return value;\n}\nexport { useMotionValue };","map":{"version":3,"names":["useContext","useState","useEffect","motionValue","MotionConfigContext","useConstant","useMotionValue","initial","value","isStatic","setLatest","onChange"],"sources":["R:/Projects/Trivia-Maximus/node_modules/framer-motion/dist/es/value/use-motion-value.mjs"],"sourcesContent":["import { useContext, useState, useEffect } from 'react';\r\nimport { motionValue } from './index.mjs';\r\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\r\nimport { useConstant } from '../utils/use-constant.mjs';\r\n\r\n/**\r\n * Creates a `MotionValue` to track the state and velocity of a value.\r\n *\r\n * Usually, these are created automatically. For advanced use-cases, like use with `useTransform`, you can create `MotionValue`s externally and pass them into the animated component via the `style` prop.\r\n *\r\n * ```jsx\r\n * export const MyComponent = () => {\r\n *   const scale = useMotionValue(1)\r\n *\r\n *   return <motion.div style={{ scale }} />\r\n * }\r\n * ```\r\n *\r\n * @param initial - The initial state.\r\n *\r\n * @public\r\n */\r\nfunction useMotionValue(initial) {\r\n    const value = useConstant(() => motionValue(initial));\r\n    /**\r\n     * If this motion value is being used in static mode, like on\r\n     * the Framer canvas, force components to rerender when the motion\r\n     * value is updated.\r\n     */\r\n    const { isStatic } = useContext(MotionConfigContext);\r\n    if (isStatic) {\r\n        const [, setLatest] = useState(initial);\r\n        useEffect(() => value.onChange(setLatest), []);\r\n    }\r\n    return value;\r\n}\r\n\r\nexport { useMotionValue };\r\n"],"mappings":";AAAA,SAASA,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACvD,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,mBAAmB,QAAQ,oCAAoC;AACxE,SAASC,WAAW,QAAQ,2BAA2B;;AAEvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,cAAc,CAACC,OAAO,EAAE;EAC7B,IAAMC,KAAK,GAAGH,WAAW,CAAC;IAAA,OAAMF,WAAW,CAACI,OAAO,CAAC;EAAA,EAAC;EACrD;AACJ;AACA;AACA;AACA;EACI,kBAAqBP,UAAU,CAACI,mBAAmB,CAAC;IAA5CK,QAAQ,eAARA,QAAQ;EAChB,IAAIA,QAAQ,EAAE;IACV,gBAAsBR,QAAQ,CAACM,OAAO,CAAC;MAAA;MAA9BG,SAAS;IAClBR,SAAS,CAAC;MAAA,OAAMM,KAAK,CAACG,QAAQ,CAACD,SAAS,CAAC;IAAA,GAAE,EAAE,CAAC;EAClD;EACA,OAAOF,KAAK;AAChB;AAEA,SAASF,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}